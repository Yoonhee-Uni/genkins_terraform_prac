pipeline {
    agent any

    environment {
        IMAGE_NAME = 'jenkins_practice_image'  // 생성할 Docker 이미지 이름
        CONTAINER_NAME = 'jenkins_practice_container'  // 컨테이너 이름
        AWS_ACCESS_KEY_ID = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
    }

    stages {
        stage('Clone Repository') {
            steps {
                git 'https://github.com/Yoonhee-Uni/genkins_terraform_prac.git'  // GitHub 레포지토리 URL로 교체
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'pip install -r requirements.txt'  // requirements.txt 파일이 있다면 종속성 설치
            }
        }

        stage('Run Tests') {
            steps {
                sh 'echo "Running tests..."'  // 테스트 명령어로 교체 가능
            }
        }

        stage('Build Docker Image') {
            steps {
                script {
                    docker.build("${IMAGE_NAME}")  // 지정한 이름으로 이미지 빌드
                }
            }
        }

        stage('Run Docker Container') {
            steps {
                script {
                    // 이미 실행 중인 컨테이너가 있다면 중지 및 삭제
                    sh "docker stop ${CONTAINER_NAME} || true && docker rm ${CONTAINER_NAME} || true"
                    
                    // Docker 컨테이너를 백그라운드에서 실행
                    sh "docker run -d -p 80:80 --name ${CONTAINER_NAME} ${IMAGE_NAME}"
                }
            }
        }

        stage('Install Terraform') {
            steps {
                sh 'curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -'
                sh 'sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"'
                sh 'sudo apt-get update && sudo apt-get install -y terraform'
            }
        }

        stage('Run Terraform') {
            steps {
                sh 'terraform -version'  // Terraform 버전 확인
                sh 'terraform init'
                sh 'terraform plan'
            }
        }    
        
    }

    post {
        always {
            cleanWs()  // 작업이 끝난 후 Jenkins 워크스페이스 정리
        }
    }
}
